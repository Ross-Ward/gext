import * as fs from 'fs';
import * as path from 'path';
import { AppConfig } from '../configuration/ai-config';

export class ConfigService {
  private static readonly CONFIG_FILE = 'gext.config.json';
  private config: AppConfig | null = null;

  loadConfig(): AppConfig {
    if (this.config) {
      return this.config;
    }

    // Try to load from current directory first, then from home directory
    const configPaths = [
      path.join(process.cwd(), ConfigService.CONFIG_FILE),
      path.join(process.cwd(), 'config', 'settings.json'),
      path.join(require('os').homedir(), '.gext', ConfigService.CONFIG_FILE)
    ];

    for (const configPath of configPaths) {
      if (fs.existsSync(configPath)) {
        try {
          const configData = fs.readFileSync(configPath, 'utf-8');
          this.config = JSON.parse(configData);
          break;
        } catch (error) {
          console.warn(`Failed to parse config file ${configPath}: ${error}`);
        }
      }
    }

    // If no config found, use defaults
    if (!this.config) {
      this.config = this.getDefaultConfig();
    }

    // Override with environment variables
    this.applyEnvironmentOverrides();

    return this.config;
  }

  private getDefaultConfig(): AppConfig {
    return {
      ai: {
        provider: 'ollama',
        model: 'llama3.1',
        baseUrl: 'http://localhost:11434',
        promptPath: 'diff-prompt.txt'
      },
      git: {
        maxRecursiveDirectories: 10,
        commitSignature: '\n\n ** Generated by Gext **'
      }
    };
  }

  private applyEnvironmentOverrides(): void {
    if (!this.config) return;

    // AI configuration overrides
    if (process.env.GEXT_AI_PROVIDER) {
      this.config.ai.provider = process.env.GEXT_AI_PROVIDER as any;
    }
    if (process.env.GEXT_AI_MODEL) {
      this.config.ai.model = process.env.GEXT_AI_MODEL;
    }
    if (process.env.GEXT_AI_API_KEY) {
      this.config.ai.apiKey = process.env.GEXT_AI_API_KEY;
    }
    if (process.env.GEXT_AI_BASE_URL) {
      this.config.ai.baseUrl = process.env.GEXT_AI_BASE_URL;
    }

    // Legacy environment variable support
    if (process.env.OPENAI_API_KEY && !this.config.ai.apiKey) {
      this.config.ai.apiKey = process.env.OPENAI_API_KEY;
    }
    if (process.env.GROQ_API_KEY && !this.config.ai.apiKey) {
      this.config.ai.apiKey = process.env.GROQ_API_KEY;
    }
    if (process.env.GEMINI_API_KEY && !this.config.ai.apiKey) {
      this.config.ai.apiKey = process.env.GEMINI_API_KEY;
    }
  }

  createDefaultConfigFile(): void {
    const configPath = path.join(process.cwd(), ConfigService.CONFIG_FILE);
    const defaultConfig = this.getDefaultConfig();
    
    fs.writeFileSync(configPath, JSON.stringify(defaultConfig, null, 2));
    console.log(`Created default config file: ${configPath}`);
  }
}